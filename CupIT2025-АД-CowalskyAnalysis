{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4-ZxYWaZi87C",
        "outputId": "b9fbd033-cdeb-47d4-d464-4198050e8518"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pulp\n",
            "  Downloading PuLP-3.0.2-py3-none-any.whl.metadata (6.7 kB)\n",
            "Downloading PuLP-3.0.2-py3-none-any.whl (17.7 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.7/17.7 MB\u001b[0m \u001b[31m55.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pulp\n",
            "Successfully installed pulp-3.0.2\n"
          ]
        }
      ],
      "source": [
        "# Импорт необходимых библиотек\n",
        "import requests                           # Для выполнения HTTP-запросов к API\n",
        "import datetime                           # Для работы с датами и временем\n",
        "from datetime import timedelta\n",
        "!pip install pulp\n",
        "import pulp                               # Для решения задачи MILP (смешанное целочисленное линейное программирование)\n",
        "import numpy as np                        # Для числовых операций\n",
        "# Для модели градиентного бустинга можно использовать, например, xgboost,\n",
        "# но здесь мы создадим имитацию (заглушку) предсказания.\n",
        "import xgboost as xgb\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Класс для представления сегмента (соединения) между станциями\n",
        "class Connection:\n",
        "    def __init__(self, start, end, departure, arrival, cost, mode):\n",
        "        self.start = start              # Название или код станции отправления\n",
        "        self.end = end                  # Название или код станции прибытия\n",
        "        self.departure = departure      # Время отправления (datetime)\n",
        "        self.arrival = arrival          # Время прибытия (datetime)\n",
        "        self.cost = cost                # Стоимость билета\n",
        "        self.mode = mode                # Тип транспорта (например, \"Поезд\", \"Автобус\", \"Самолет\")\n",
        "\n",
        "    def __repr__(self):\n",
        "        return f\"{self.mode} из {self.start} в {self.departure.strftime('%H:%M')} до {self.end} в {self.arrival.strftime('%H:%M')} (Стоимость: {self.cost})\""
      ],
      "metadata": {
        "id": "agO_AAC4jKSy"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def fetch_yandex_schedule(from_station, to_station, date):\n",
        "    \"\"\"\n",
        "    Получает данные расписания с API Яндекс. Путешествия.\n",
        "    Для демонстрации используется заглушка – в реальном коде здесь необходимо\n",
        "    выполнить запрос к API, передав параметры: from, to, date, apikey и др.\n",
        "    \"\"\"\n",
        "    # Здесь нужно сформировать параметры запроса согласно документации API\n",
        "    params = {\n",
        "        \"apikey\": \"bc8c6b0c-b611-4dfa-b587-f4d399f36050\",\n",
        "        \"format\": \"json\",\n",
        "        \"from\": from_station,\n",
        "        \"to\": to_station,\n",
        "        \"lang\": \"ru\",\n",
        "        \"date\": date.strftime(\"%Y-%m-%d\")\n",
        "    }\n",
        "    url = 'https://api.rasp.yandex.net/v3.0/schedule/'\n",
        "\n",
        "    # Выполняем запрос\n",
        "    try:\n",
        "        response = requests.get(url, params=params)\n",
        "        if response.status_code != 200:\n",
        "            print(\"Ошибка при получении данных от Yandex API:\", response.status_code)\n",
        "            return []\n",
        "        data = response.json()\n",
        "    except Exception as e:\n",
        "        print(\"Ошибка при выполнении запроса:\", e)\n",
        "        data = {}\n",
        "\n",
        "    connections = []\n",
        "    for segment in data.get(\"segments\", []):\n",
        "        try:\n",
        "            departure = datetime.datetime.fromisoformat(segment.get(\"departure\"))\n",
        "            arrival = datetime.datetime.fromisoformat(segment.get(\"arrival\"))\n",
        "            cost = segment.get(\"price\", 0)\n",
        "            mode = segment.get(\"transport_type\", \"Unknown\")\n",
        "            start = segment.get(\"from\", {}).get(\"title\", \"Unknown\")\n",
        "            end = segment.get(\"to\", {}).get(\"title\", \"Unknown\")\n",
        "            conn = Connection(start, end, departure, arrival, cost, mode)\n",
        "            connections.append(conn)\n",
        "        except Exception as e:\n",
        "            print(\"Ошибка обработки сегмента:\", e)\n",
        "    # Если нет реальных данных, создадим примерные соединения для демонстрации:\n",
        "    if not connections:\n",
        "        print(\"Используются демонстрационные данные (заглушка).\")\n",
        "        # Пример данных – два сегмента, образующих маршрут от A до D через B\n",
        "        connections = [\n",
        "            Connection(\"A\", \"B\", datetime.datetime(date.year, date.month, date.day, 8, 0),\n",
        "                       datetime.datetime(date.year, date.month, date.day, 9, 30), 50, \"Поезд\"),\n",
        "            Connection(\"B\", \"D\", datetime.datetime(date.year, date.month, date.day, 10, 30),\n",
        "                       datetime.datetime(date.year, date.month, date.day, 12, 0), 80, \"Автобус\")\n",
        "        ]\n",
        "    return connections\n"
      ],
      "metadata": {
        "id": "irj5oQt9jODt"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Заглушка для получения данных о погоде с Яндекс. Погода\n",
        "def fetch_weather(station):\n",
        "    \"\"\"\n",
        "    Возвращает имитацию погодных условий для заданной станции.\n",
        "    В реальном решении здесь необходимо делать запрос к API Яндекс. Погода.\n",
        "    \"\"\"\n",
        "    # Пример: для станции с плохой погодой можно вернуть \"снег\", иначе \"ясно\"\n",
        "    weather_conditions = {\"A\": \"ясно\", \"B\": \"облачно\", \"D\": \"дождь\"}\n",
        "    return weather_conditions.get(station, \"ясно\")\n",
        "\n",
        "# Заглушка для получения данных о дорожной ситуации с Яндекс. Карты\n",
        "def fetch_traffic(station):\n",
        "    \"\"\"\n",
        "    Возвращает имитацию дорожной ситуации (фактор пробок) для заданной точки.\n",
        "    В реальном решении здесь необходимо делать запрос к API Яндекс. Карты.\n",
        "    \"\"\"\n",
        "    # Пример: значение 1.0 – нормальная ситуация, >1.0 – усиленные пробки\n",
        "    traffic_conditions = {\"A\": 1.0, \"B\": 1.2, \"D\": 1.5}\n",
        "    return traffic_conditions.get(station, 1.0)"
      ],
      "metadata": {
        "id": "LKaYNgjEjQ1s"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Функция для предсказания времени пересадки (в минутах) на основе данных о погоде и пробках\n",
        "def predict_transfer_time(station):\n",
        "    \"\"\"\n",
        "    Предсказывает время, необходимое для пересадки в заданном пункте.\n",
        "    Здесь можно использовать обученную модель градиентного бустинга.\n",
        "    В демонстрационных целях возвращаем значение, зависящее от погодных и дорожных условий.\n",
        "    \"\"\"\n",
        "    weather = fetch_weather(station)\n",
        "    traffic = fetch_traffic(station)\n",
        "    # Базовое время пересадки, например, 15 минут\n",
        "    base_time = 15\n",
        "    # Если погода плохая или пробки сильные, увеличиваем время\n",
        "    if weather in [\"дождь\", \"снег\"]:\n",
        "        base_time += 10\n",
        "    if traffic > 1.2:\n",
        "        base_time += 5\n",
        "    return base_time  # в минутах"
      ],
      "metadata": {
        "id": "Wx0wYqk0jU4J"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Функция для предсказания стоимости такси (с помощью модели градиентного бустинга)\n",
        "def predict_taxi_cost(station):\n",
        "    \"\"\"\n",
        "    Предсказывает стоимость такси для перемещения между различными пересадочными точками.\n",
        "    Здесь можно использовать обученную модель градиентного бустинга.\n",
        "    Для демонстрации возвращается значение, зависящее от погодных условий и пробок.\n",
        "    \"\"\"\n",
        "    weather = fetch_weather(station)\n",
        "    traffic = fetch_traffic(station)\n",
        "    base_cost = 300  # базовая стоимость такси, например, 300 руб.\n",
        "    if weather in [\"дождь\", \"снег\"]:\n",
        "        base_cost *= 1.3\n",
        "    if traffic > 1.2:\n",
        "        base_cost *= 1.2\n",
        "    return base_cost  # в рублях"
      ],
      "metadata": {
        "id": "TdAKcvpxjWs-"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Функция для оценки вероятности задержки рейса (для авиарейсов)\n",
        "def predict_delay_probability(connection):\n",
        "    \"\"\"\n",
        "    Предсказывает вероятность задержки рейса.\n",
        "    Для самолетов учитываем погодные условия, для других видов транспорта вероятность задержки невысока.\n",
        "    \"\"\"\n",
        "    if connection.mode.lower() == \"самолет\":\n",
        "        weather = fetch_weather(connection.start)\n",
        "        if weather in [\"дождь\", \"снег\"]:\n",
        "            return 0.5  # 50% вероятность задержки\n",
        "        else:\n",
        "            return 0.1  # 10% вероятность задержки\n",
        "    else:\n",
        "        return 0.05  # для поездов и автобусов"
      ],
      "metadata": {
        "id": "7ScTW-9ajYao"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ФУНКЦИИ ДЛЯ ОПТИМИЗАЦИИ MILP\n",
        "# ------------------------------------------------------------------------------\n",
        "\n",
        "def build_milp_model(connections, user_start, user_end, weight_time=1.0, weight_cost=1.0):\n",
        "    \"\"\"\n",
        "    Строит MILP модель для выбора оптимального маршрута с учетом пересадок.\n",
        "    Используются бинарные переменные для каждого соединения.\n",
        "\n",
        "    Аргументы:\n",
        "        connections: список объектов Connection (кандидаты для маршрута)\n",
        "        user_start: станция отправления (строка)\n",
        "        user_end: станция назначения (строка)\n",
        "        weight_time: вес для минимизации времени (в минутах)\n",
        "        weight_cost: вес для минимизации стоимости (билет + пересадка)\n",
        "    Возвращает:\n",
        "        MILP модель (объект pulp.LpProblem) и словарь переменных x.\n",
        "    \"\"\"\n",
        "    # Приводим времена отправления и прибытия к числовому виду (минуты с начала дня)\n",
        "    for conn in connections:\n",
        "        conn.departure_minutes = conn.departure.hour * 60 + conn.departure.minute\n",
        "        conn.arrival_minutes = conn.arrival.hour * 60 + conn.arrival.minute\n",
        "\n",
        "    # Определяем MILP задачу: минимизация целевой функции\n",
        "    prob = pulp.LpProblem(\"Route_Optimization\", pulp.LpMinimize)\n",
        "\n",
        "    # Создаем бинарные переменные для каждого соединения\n",
        "    x = {}\n",
        "    for i, conn in enumerate(connections):\n",
        "        x[i] = pulp.LpVariable(f\"x_{i}\", cat=\"Binary\")\n",
        "\n",
        "    # Целевая функция: сумма (время в пути + стоимость билетов)\n",
        "    # Здесь время рассчитывается как разница между временем прибытия и отправления для каждого сегмента\n",
        "    prob += pulp.lpSum([\n",
        "        x[i] * (weight_time * (conn.arrival_minutes - conn.departure_minutes) + weight_cost * conn.cost)\n",
        "        for i, conn in enumerate(connections)\n",
        "    ]), \"Total_Travel_Time_and_Cost\"\n",
        "\n",
        "    # Список всех станций (уникальные названия)\n",
        "    stations = set()\n",
        "    for conn in connections:\n",
        "        stations.add(conn.start)\n",
        "        stations.add(conn.end)\n",
        "\n",
        "    # Добавляем потоковые ограничения (консервация потока)\n",
        "    for station in stations:\n",
        "        # Если станция является отправной точкой\n",
        "        if station == user_start:\n",
        "            prob += pulp.lpSum([x[i] for i, conn in enumerate(connections) if conn.start == station]) == 1, f\"Flow_start_{station}\"\n",
        "        # Если станция является конечной точкой\n",
        "        elif station == user_end:\n",
        "            prob += pulp.lpSum([x[i] for i, conn in enumerate(connections) if conn.end == station]) == 1, f\"Flow_end_{station}\"\n",
        "        else:\n",
        "            # Для промежуточных станций: входящие соединения = исходящие соединения\n",
        "            prob += (pulp.lpSum([x[i] for i, conn in enumerate(connections) if conn.end == station]) -\n",
        "                     pulp.lpSum([x[i] for i, conn in enumerate(connections) if conn.start == station])) == 0, f\"Flow_{station}\"\n",
        "\n",
        "    # Добавляем ограничения по времени пересадки для последовательных соединений\n",
        "    # Для каждой пары соединений (i, j), где конец i совпадает с началом j, требуем:\n",
        "    # (j.departure_minutes - i.arrival_minutes) >= (предсказанное время пересадки + 30) при условии, что обе переменные равны 1.\n",
        "    M = 10000  # большое число для Big-M метода\n",
        "    for i, conn_i in enumerate(connections):\n",
        "        for j, conn_j in enumerate(connections):\n",
        "            if conn_i.end == conn_j.start:\n",
        "                # Вычисляем предсказанное время пересадки для станции (в минутах)\n",
        "                transfer_time = predict_transfer_time(conn_i.end)\n",
        "                # Ограничение: если обе переменные выбраны (x_i = x_j = 1), то:\n",
        "                # (departure_j - arrival_i) >= transfer_time + 30\n",
        "                prob += (conn_j.departure_minutes - conn_i.arrival_minutes) >= (transfer_time + 30) - M * (2 - x[i] - x[j]), f\"Transfer_{i}_{j}\"\n",
        "\n",
        "    return prob, x\n"
      ],
      "metadata": {
        "id": "X4UVJ3kUjcPX"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def extract_route(connections, x_vars):\n",
        "    \"\"\"\n",
        "    Извлекает выбранный маршрут (последовательность соединений) из решения MILP.\n",
        "    Предполагается, что выбранные переменные образуют связную цепочку.\n",
        "    \"\"\"\n",
        "    selected = [conn for i, conn in enumerate(connections) if pulp.value(x_vars[i]) > 0.5]\n",
        "    # Сортируем выбранные соединения по времени отправления\n",
        "    selected.sort(key=lambda c: c.departure)\n",
        "    return selected"
      ],
      "metadata": {
        "id": "av8g85B3jeAt"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ОСНОВНОЙ БЛОК РАБОТЫ СКРИПТА\n",
        "# ------------------------------------------------------------------------------\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Входные параметры пользователя\n",
        "    # Замените идентификаторы на реальные коды станций согласно API Яндекс.\n",
        "    user_from_station = \"s9600396\"  # Идентификатор отправной станции\n",
        "    user_to_station = \"s9600396\"    # Идентификатор станции назначения\n",
        "    travel_date = datetime.datetime(2025, 4, 20)  # Дата поездки\n",
        "    # Критерий ранжирования: можно задать веса для времени и стоимости\n",
        "    weight_time = 1.0\n",
        "    weight_cost = 1.0\n",
        "\n",
        "    print(\"Получение данных расписания с Яндекс API...\")\n",
        "    connections = fetch_yandex_schedule(user_from_station, user_to_station, travel_date)\n",
        "    if not connections:\n",
        "        print(\"Нет данных о соединениях.\")\n",
        "        exit(1)\n",
        "    else:\n",
        "        print(\"Полученные соединения:\")\n",
        "        for conn in connections:\n",
        "            print(\"  \", conn)\n",
        "\n",
        "    # Для MILP-модели необходимо знать реальные названия начальной и конечной станций.\n",
        "    # В данном примере используем названия из первого соединения.\n",
        "    user_start = connections[0].start\n",
        "    user_end = connections[-1].end\n",
        "\n",
        "    # Строим MILP модель для оптимизации маршрута\n",
        "    print(\"\\nПостроение MILP модели для оптимального маршрута...\")\n",
        "    prob, x_vars = build_milp_model(connections, user_start, user_end, weight_time, weight_cost)\n",
        "\n",
        "    # Решаем задачу MILP с помощью встроенного решателя pulp\n",
        "    prob.solve()\n",
        "    print(\"Статус решения:\", pulp.LpStatus[prob.status])\n",
        "\n",
        "    # Извлекаем оптимальный маршрут\n",
        "    route = extract_route(connections, x_vars)\n",
        "    if not route:\n",
        "        print(\"Оптимальный маршрут не найден.\")\n",
        "    else:\n",
        "        print(\"\\nОптимальный маршрут:\")\n",
        "        for seg in route:\n",
        "            print(\"  \", seg)\n",
        "\n",
        "        # Дополнительные рекомендации и расчёты для пересадок\n",
        "        if len(route) > 1:\n",
        "            print(\"\\nРасчёт дополнительных параметров для пересадок:\")\n",
        "            for i in range(len(route) - 1):\n",
        "                # Предсказанное время пересадки\n",
        "                transfer_station = route[i].end\n",
        "                predicted_transfer = predict_transfer_time(transfer_station)\n",
        "                # Предсказанная стоимость такси для пересадки\n",
        "                taxi_cost = predict_taxi_cost(transfer_station)\n",
        "                print(f\"На пересадке в {transfer_station}:\")\n",
        "                print(f\"  Предполагаемое время пересадки: {predicted_transfer} мин.\")\n",
        "                print(f\"  Предполагаемая стоимость такси: {taxi_cost:.2f} руб.\")\n",
        "\n",
        "        # Оценка вероятности задержки для каждого сегмента (например, для самолетов)\n",
        "        print(\"\\nОценка вероятности задержки:\")\n",
        "        for seg in route:\n",
        "            delay_prob = predict_delay_probability(seg)\n",
        "            print(f\"  {seg.mode} из {seg.start} в {seg.end}: вероятность задержки {delay_prob*100:.1f}%\")\n",
        "\n",
        "        # Вывод общей информации о маршруте\n",
        "        total_time = sum([(seg.arrival - seg.departure).total_seconds() for seg in route]) / 60  # в минутах\n",
        "        total_cost = sum([seg.cost for seg in route])\n",
        "        print(\"\\nОбщие характеристики маршрута:\")\n",
        "        print(f\"  Общее время в пути (без учета пересадок): {total_time:.1f} мин.\")\n",
        "        print(f\"  Общая стоимость билетов: {total_cost:.2f} руб.\")\n",
        "\n",
        "        # Рекомендации могут быть дополнительно скорректированы на основе истории предпочтений клиентов,\n",
        "        # используя, например, методы кластеризации (K-means/K-modes/K-prototypes) для выделения оптимальных вариантов.\n",
        "        print(\"\\nРекомендуется учитывать указанные дополнительные расходы и вероятность задержек при выборе маршрута.\")"
      ],
      "metadata": {
        "id": "vCisUAiljg2N"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
